/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKey,
  AppUser,
  AppUserExtraV1,
  AuthzRequestExtraV1,
  GenerateApiTokenRequest,
  GenerateApiTokenResponse,
  UpdateAuthzRequestStatus,
} from '../models/index';
import {
    ApiKeyFromJSON,
    ApiKeyToJSON,
    AppUserFromJSON,
    AppUserToJSON,
    AppUserExtraV1FromJSON,
    AppUserExtraV1ToJSON,
    AuthzRequestExtraV1FromJSON,
    AuthzRequestExtraV1ToJSON,
    GenerateApiTokenRequestFromJSON,
    GenerateApiTokenRequestToJSON,
    GenerateApiTokenResponseFromJSON,
    GenerateApiTokenResponseToJSON,
    UpdateAuthzRequestStatusFromJSON,
    UpdateAuthzRequestStatusToJSON,
} from '../models/index';

export interface GenerateApiTokenOperationRequest {
    generateApiTokenRequest: GenerateApiTokenRequest;
}

export interface ListApiKeyRequest {
    servicePointId: number;
}

export interface ListAppUserRequest {
    servicePointId: number;
}

export interface ReadApiKeyRequest {
    apiKeyId: number;
}

export interface ReadAppUserRequest {
    appUserId: number;
}

export interface ReadAppUserExtraRequest {
    appUserId: number;
}

export interface ReadRequestAuthzRequest {
    authzRequestId: number;
}

export interface UpdateApiKeyRequest {
    apiKey: ApiKey;
}

export interface UpdateAppUserRequest {
    appUser: AppUser;
}

export interface UpdateAuthzRequestStatusRequest {
    updateAuthzRequestStatus: UpdateAuthzRequestStatus;
}

/**
 * 
 */
export class AdminExperimentalApi extends runtime.BaseAPI {

    /**
     * generate api token
     */
    async generateApiTokenRaw(requestParameters: GenerateApiTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateApiTokenResponse>> {
        if (requestParameters.generateApiTokenRequest === null || requestParameters.generateApiTokenRequest === undefined) {
            throw new runtime.RequiredError('generateApiTokenRequest','Required parameter requestParameters.generateApiTokenRequest was null or undefined when calling generateApiToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/generate-api-token/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateApiTokenRequestToJSON(requestParameters.generateApiTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateApiTokenResponseFromJSON(jsonValue));
    }

    /**
     * generate api token
     */
    async generateApiToken(requestParameters: GenerateApiTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateApiTokenResponse> {
        const response = await this.generateApiTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list app user data that are for keys
     */
    async listApiKeyRaw(requestParameters: ListApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiKey>>> {
        if (requestParameters.servicePointId === null || requestParameters.servicePointId === undefined) {
            throw new runtime.RequiredError('servicePointId','Required parameter requestParameters.servicePointId was null or undefined when calling listApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/service-point/v1/{servicePointId}/list-api-key`.replace(`{${"servicePointId"}}`, encodeURIComponent(String(requestParameters.servicePointId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyFromJSON));
    }

    /**
     * list app user data that are for keys
     */
    async listApiKey(requestParameters: ListApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiKey>> {
        const response = await this.listApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list app user data for service point that authz users can see
     */
    async listAppUserRaw(requestParameters: ListAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppUser>>> {
        if (requestParameters.servicePointId === null || requestParameters.servicePointId === undefined) {
            throw new runtime.RequiredError('servicePointId','Required parameter requestParameters.servicePointId was null or undefined when calling listAppUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/service-point/v1/{servicePointId}/list-app-user`.replace(`{${"servicePointId"}}`, encodeURIComponent(String(requestParameters.servicePointId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppUserFromJSON));
    }

    /**
     * list app user data for service point that authz users can see
     */
    async listAppUser(requestParameters: ListAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppUser>> {
        const response = await this.listAppUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list authz requests for all SP
     */
    async listAuthzRequestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AuthzRequestExtraV1>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/admin-authz-request/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthzRequestExtraV1FromJSON));
    }

    /**
     * list authz requests for all SP
     */
    async listAuthzRequest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AuthzRequestExtraV1>> {
        const response = await this.listAuthzRequestRaw(initOverrides);
        return await response.value();
    }

    /**
     * read app user \"api key\" data that authorized users can see
     */
    async readApiKeyRaw(requestParameters: ReadApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKey>> {
        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling readApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/api-key/v1/{apiKeyId}`.replace(`{${"apiKeyId"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyFromJSON(jsonValue));
    }

    /**
     * read app user \"api key\" data that authorized users can see
     */
    async readApiKey(requestParameters: ReadApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKey> {
        const response = await this.readApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read app user data that authorized users can see
     */
    async readAppUserRaw(requestParameters: ReadAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppUser>> {
        if (requestParameters.appUserId === null || requestParameters.appUserId === undefined) {
            throw new runtime.RequiredError('appUserId','Required parameter requestParameters.appUserId was null or undefined when calling readAppUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/app-user/v1/{appUserId}`.replace(`{${"appUserId"}}`, encodeURIComponent(String(requestParameters.appUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppUserFromJSON(jsonValue));
    }

    /**
     * read app user data that authorized users can see
     */
    async readAppUser(requestParameters: ReadAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppUser> {
        const response = await this.readAppUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read app user data and extra stuff
     */
    async readAppUserExtraRaw(requestParameters: ReadAppUserExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppUserExtraV1>> {
        if (requestParameters.appUserId === null || requestParameters.appUserId === undefined) {
            throw new runtime.RequiredError('appUserId','Required parameter requestParameters.appUserId was null or undefined when calling readAppUserExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/app-user-extra/v1/{appUserId}`.replace(`{${"appUserId"}}`, encodeURIComponent(String(requestParameters.appUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppUserExtraV1FromJSON(jsonValue));
    }

    /**
     * read app user data and extra stuff
     */
    async readAppUserExtra(requestParameters: ReadAppUserExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppUserExtraV1> {
        const response = await this.readAppUserExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read authz request
     */
    async readRequestAuthzRaw(requestParameters: ReadRequestAuthzRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthzRequestExtraV1>> {
        if (requestParameters.authzRequestId === null || requestParameters.authzRequestId === undefined) {
            throw new runtime.RequiredError('authzRequestId','Required parameter requestParameters.authzRequestId was null or undefined when calling readRequestAuthz.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/public/request-authz/v1/{authzRequestId}`.replace(`{${"authzRequestId"}}`, encodeURIComponent(String(requestParameters.authzRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthzRequestExtraV1FromJSON(jsonValue));
    }

    /**
     * read authz request
     */
    async readRequestAuthz(requestParameters: ReadRequestAuthzRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthzRequestExtraV1> {
        const response = await this.readRequestAuthzRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update an \"api-key\" type app-user (i.e. not a \"person type\" user),  create a new one if id not set  
     */
    async updateApiKeyRaw(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKey>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling updateApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/api-key/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyToJSON(requestParameters.apiKey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyFromJSON(jsonValue));
    }

    /**
     * update an \"api-key\" type app-user (i.e. not a \"person type\" user),  create a new one if id not set  
     */
    async updateApiKey(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKey> {
        const response = await this.updateApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update an \"user\" type app-user (i.e. not an api-key)
     */
    async updateAppUserRaw(requestParameters: UpdateAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppUser>> {
        if (requestParameters.appUser === null || requestParameters.appUser === undefined) {
            throw new runtime.RequiredError('appUser','Required parameter requestParameters.appUser was null or undefined when calling updateAppUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/app-user/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppUserToJSON(requestParameters.appUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppUserFromJSON(jsonValue));
    }

    /**
     * update an \"user\" type app-user (i.e. not an api-key)
     */
    async updateAppUser(requestParameters: UpdateAppUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppUser> {
        const response = await this.updateAppUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update a request to change its status
     */
    async updateAuthzRequestStatusRaw(requestParameters: UpdateAuthzRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateAuthzRequestStatus === null || requestParameters.updateAuthzRequestStatus === undefined) {
            throw new runtime.RequiredError('updateAuthzRequestStatus','Required parameter requestParameters.updateAuthzRequestStatus was null or undefined when calling updateAuthzRequestStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/experimental/update-authz-request-status/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthzRequestStatusToJSON(requestParameters.updateAuthzRequestStatus),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * update a request to change its status
     */
    async updateAuthzRequestStatus(requestParameters: UpdateAuthzRequestStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAuthzRequestStatusRaw(requestParameters, initOverrides);
    }

}

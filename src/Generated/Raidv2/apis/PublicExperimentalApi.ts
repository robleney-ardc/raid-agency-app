/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PublicServicePoint,
} from '../models/index';
import {
    PublicServicePointFromJSON,
    PublicServicePointToJSON,
} from '../models/index';

/**
 * 
 */
export class PublicExperimentalApi extends runtime.BaseAPI {

    /**
     * Returns only enabled service-points - intended for use on the  authz-request page.  Note that it is not paginated nor does it have a  limit on the number of records it returns.  May need to be refactored to something more scalable in future, if we ever have a lot of  service-points. 
     * list service point data that un-authn users can see
     */
    async publicListServicePointRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PublicServicePoint>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/public/list-service-point/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicServicePointFromJSON));
    }

    /**
     * Returns only enabled service-points - intended for use on the  authz-request page.  Note that it is not paginated nor does it have a  limit on the number of records it returns.  May need to be refactored to something more scalable in future, if we ever have a lot of  service-points. 
     * list service point data that un-authn users can see
     */
    async publicListServicePoint(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PublicServicePoint>> {
        const response = await this.publicListServicePointRaw(initOverrides);
        return await response.value();
    }

}

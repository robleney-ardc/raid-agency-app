/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UpdateAuthzRequest,
  UpdateAuthzResponse,
} from '../models/index';
import {
    UpdateAuthzRequestFromJSON,
    UpdateAuthzRequestToJSON,
    UpdateAuthzResponseFromJSON,
    UpdateAuthzResponseToJSON,
} from '../models/index';

export interface UpdateAuthzRequestRequest {
    updateAuthzRequest: UpdateAuthzRequest;
}

/**
 * 
 */
export class UnapprovedExperimentalApi extends runtime.BaseAPI {

    /**
     * create or update an authz-request
     */
    async updateAuthzRequestRaw(requestParameters: UpdateAuthzRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAuthzResponse>> {
        if (requestParameters.updateAuthzRequest === null || requestParameters.updateAuthzRequest === undefined) {
            throw new runtime.RequiredError('updateAuthzRequest','Required parameter requestParameters.updateAuthzRequest was null or undefined when calling updateAuthzRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/public/authz-request/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthzRequestToJSON(requestParameters.updateAuthzRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAuthzResponseFromJSON(jsonValue));
    }

    /**
     * create or update an authz-request
     */
    async updateAuthzRequest(requestParameters: UpdateAuthzRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAuthzResponse> {
        const response = await this.updateAuthzRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

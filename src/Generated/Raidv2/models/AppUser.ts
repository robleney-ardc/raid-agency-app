/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AppUser
 */
export interface AppUser {
    /**
     * 
     * @type {number}
     * @memberof AppUser
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof AppUser
     */
    servicePointId: number;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    clientId: string;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    idProvider: string;
    /**
     * 
     * @type {string}
     * @memberof AppUser
     */
    role: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppUser
     */
    enabled: boolean;
    /**
     * 
     * @type {Date}
     * @memberof AppUser
     */
    tokenCutoff?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AppUser
     */
    dateCreated: Date;
}

/**
 * Check if a given object implements the AppUser interface.
 */
export function instanceOfAppUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "servicePointId" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "clientId" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "idProvider" in value;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "enabled" in value;
    isInstance = isInstance && "dateCreated" in value;

    return isInstance;
}

export function AppUserFromJSON(json: any): AppUser {
    return AppUserFromJSONTyped(json, false);
}

export function AppUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'servicePointId': json['servicePointId'],
        'email': json['email'],
        'clientId': json['clientId'],
        'subject': json['subject'],
        'idProvider': json['idProvider'],
        'role': json['role'],
        'enabled': json['enabled'],
        'tokenCutoff': !exists(json, 'tokenCutoff') ? undefined : (new Date(json['tokenCutoff'])),
        'dateCreated': (new Date(json['dateCreated'])),
    };
}

export function AppUserToJSON(value?: AppUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'servicePointId': value.servicePointId,
        'email': value.email,
        'clientId': value.clientId,
        'subject': value.subject,
        'idProvider': value.idProvider,
        'role': value.role,
        'enabled': value.enabled,
        'tokenCutoff': value.tokenCutoff === undefined ? undefined : (value.tokenCutoff.toISOString()),
        'dateCreated': (value.dateCreated.toISOString()),
    };
}


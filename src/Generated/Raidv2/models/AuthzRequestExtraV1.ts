/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthzRequestStatus } from './AuthzRequestStatus';
import {
    AuthzRequestStatusFromJSON,
    AuthzRequestStatusFromJSONTyped,
    AuthzRequestStatusToJSON,
} from './AuthzRequestStatus';

/**
 * authorization request with extra data
 * @export
 * @interface AuthzRequestExtraV1
 */
export interface AuthzRequestExtraV1 {
    /**
     * 
     * @type {number}
     * @memberof AuthzRequestExtraV1
     */
    id: number;
    /**
     * 
     * @type {AuthzRequestStatus}
     * @memberof AuthzRequestExtraV1
     */
    status: AuthzRequestStatus;
    /**
     * 
     * @type {number}
     * @memberof AuthzRequestExtraV1
     */
    servicePointId: number;
    /**
     * 
     * @type {string}
     * @memberof AuthzRequestExtraV1
     */
    servicePointName: string;
    /**
     * 
     * @type {string}
     * @memberof AuthzRequestExtraV1
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthzRequestExtraV1
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AuthzRequestExtraV1
     */
    clientId: string;
    /**
     * 
     * @type {string}
     * @memberof AuthzRequestExtraV1
     */
    idProvider: string;
    /**
     * 
     * @type {string}
     * @memberof AuthzRequestExtraV1
     */
    subject: string;
    /**
     * 
     * @type {number}
     * @memberof AuthzRequestExtraV1
     */
    respondingUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthzRequestExtraV1
     */
    respondingUserEmail?: string;
    /**
     * 
     * @type {Date}
     * @memberof AuthzRequestExtraV1
     */
    dateRequested: Date;
    /**
     * 
     * @type {Date}
     * @memberof AuthzRequestExtraV1
     */
    dateResponded?: Date;
}

/**
 * Check if a given object implements the AuthzRequestExtraV1 interface.
 */
export function instanceOfAuthzRequestExtraV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "servicePointId" in value;
    isInstance = isInstance && "servicePointName" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "clientId" in value;
    isInstance = isInstance && "idProvider" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "dateRequested" in value;

    return isInstance;
}

export function AuthzRequestExtraV1FromJSON(json: any): AuthzRequestExtraV1 {
    return AuthzRequestExtraV1FromJSONTyped(json, false);
}

export function AuthzRequestExtraV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthzRequestExtraV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'status': AuthzRequestStatusFromJSON(json['status']),
        'servicePointId': json['servicePointId'],
        'servicePointName': json['servicePointName'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'email': json['email'],
        'clientId': json['clientId'],
        'idProvider': json['idProvider'],
        'subject': json['subject'],
        'respondingUserId': !exists(json, 'respondingUserId') ? undefined : json['respondingUserId'],
        'respondingUserEmail': !exists(json, 'respondingUserEmail') ? undefined : json['respondingUserEmail'],
        'dateRequested': (new Date(json['dateRequested'])),
        'dateResponded': !exists(json, 'dateResponded') ? undefined : (new Date(json['dateResponded'])),
    };
}

export function AuthzRequestExtraV1ToJSON(value?: AuthzRequestExtraV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'status': AuthzRequestStatusToJSON(value.status),
        'servicePointId': value.servicePointId,
        'servicePointName': value.servicePointName,
        'comments': value.comments,
        'email': value.email,
        'clientId': value.clientId,
        'idProvider': value.idProvider,
        'subject': value.subject,
        'respondingUserId': value.respondingUserId,
        'respondingUserEmail': value.respondingUserEmail,
        'dateRequested': (value.dateRequested.toISOString()),
        'dateResponded': value.dateResponded === undefined ? undefined : (value.dateResponded.toISOString()),
    };
}

